name: 'AI Code Review with Gemini'

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/**'
      - 'src/**'
      - '**/*.ts'
      - '**/*.tsx'
      - '**/*.js'
      - '**/*.jsx'

jobs:
  ai-code-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          packages/**/*
          src/**/*
          **/*.ts
          **/*.tsx
          **/*.js
          **/*.jsx

    - name: Setup Python for Gemini API
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Gemini API client
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        pip install google-generativeai requests

    - name: AI Code Review with Gemini
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python .github/scripts/gemini-code-review.py

    - name: Comment PR with AI review
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let reviewComment = '## ü§ñ AI Code Review (Gemini)\n\n';

          if (fs.existsSync('.github/scripts/review-output.md')) {
            const reviewContent = fs.readFileSync('.github/scripts/review-output.md', 'utf8');
            reviewComment += reviewContent;
          } else {
            reviewComment += '‚ùå AI code review failed to generate output.\n\n';
            reviewComment += 'Please check the workflow logs for details.';
          }

          reviewComment += '\n\n---\n';
          reviewComment += '*This review was generated by Google Gemini AI*';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: reviewComment
          });

  code-quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run linting
      run: |
        npm run lint

    - name: Run type checking
      run: |
        npm run type-check

    - name: Check test coverage
      run: |
        npm run test:coverage

    - name: Generate code quality report
      run: |
        echo "# Code Quality Report" > code-quality-report.md
        echo "" >> code-quality-report.md
        echo "## Generated: $(date)" >> code-quality-report.md
        echo "" >> code-quality-report.md

        echo "## Linting Results" >> code-quality-report.md
        echo "\`\`\`" >> code-quality-report.md
        npm run lint 2>&1 || true >> code-quality-report.md
        echo "\`\`\`" >> code-quality-report.md
        echo "" >> code-quality-report.md

        echo "## Type Check Results" >> code-quality-report.md
        echo "\`\`\`" >> code-quality-report.md
        npm run type-check 2>&1 || true >> code-quality-report.md
        echo "\`\`\`" >> code-quality-report.md
        echo "" >> code-quality-report.md

        if [ -d coverage ]; then
          echo "## Test Coverage" >> code-quality-report.md
          echo "\`\`\`" >> code-quality-report.md
          find coverage -name "*.txt" -o -name "*.json" | head -5 | xargs cat || echo "Coverage report not found" >> code-quality-report.md
          echo "\`\`\`" >> code-quality-report.md
        fi

    - name: Comment PR with code quality
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let qualityComment = '## üìä Code Quality Check\n\n';

          if (fs.existsSync('code-quality-report.md')) {
            const qualityContent = fs.readFileSync('code-quality-report.md', 'utf8');
            // Extract just the key information, not the full report
            const lines = qualityContent.split('\n');
            let inLinting = false;
            let inTypeCheck = false;

            for (const line of lines) {
              if (line.includes('Linting Results')) {
                inLinting = true;
                qualityComment += '### Linting\n';
              } else if (line.includes('Type Check Results')) {
                inTypeCheck = true;
                inLinting = false;
                qualityComment += '\n### Type Checking\n';
              } else if (line.includes('Test Coverage')) {
                inTypeCheck = false;
                qualityComment += '\n### Test Coverage\n';
              } else if ((inLinting || inTypeCheck) && line.trim() && !line.startsWith('#') && !line.startsWith('```')) {
                if (line.includes('error') || line.includes('Error')) {
                  qualityComment += '‚ùå ' + line + '\n';
                } else if (line.includes('warning') || line.includes('Warning')) {
                  qualityComment += '‚ö†Ô∏è ' + line + '\n';
                } else if (line.trim()) {
                  qualityComment += line + '\n';
                }
              }
            }
          } else {
            qualityComment += '‚ùå Code quality check failed to generate report.\n\n';
          }

          qualityComment += '\nüìã **Full Report:** Available in workflow artifacts';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: qualityComment
          });

    - name: Upload code quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: code-quality-report.md
        retention-days: 30
