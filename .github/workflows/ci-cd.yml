name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run linting
      run: |
        npm run lint

    - name: Run type checking
      run: |
        npm run type-check

    - name: Run tests
      run: |
        npm run test

    - name: Build project
      run: |
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          packages/*/dist/
          packages/*/build/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > security-reports/npm-audit.json || true

    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: security-reports/
        retention-days: 30

    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          let comment = '## üîí Security Check Results\n\n';

          // Check for npm audit results
          if (fs.existsSync('security-reports/npm-audit.json')) {
            const auditData = JSON.parse(fs.readFileSync('security-reports/npm-audit.json', 'utf8'));
            if (auditData.vulnerabilities && Object.keys(auditData.vulnerabilities).length > 0) {
              comment += '‚ö†Ô∏è **NPM Vulnerabilities Found:**\n';
              comment += '```\n';
              comment += `Total vulnerabilities: ${Object.keys(auditData.vulnerabilities).length}\n`;
              comment += '```\n\n';
              comment += 'üìã **Action Required:** Review and fix security vulnerabilities before merging.\n\n';
            } else {
              comment += '‚úÖ **NPM Audit:** No vulnerabilities found\n\n';
            }
          }

          comment += 'üîó [View Security Tab](https://github.com/${{ github.repository }}/security/code-scanning)';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: security-and-quality

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci

    - name: Build project
      run: |
        npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    permissions:
      contents: read
      deployments: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: packages/

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example: npm run deploy:staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, codeql]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    permissions:
      contents: read
      deployments: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: packages/

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # For example: npm run deploy:prod
